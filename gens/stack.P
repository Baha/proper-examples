-file("stack.erl", 1).

-module(stack).

-export([prop_push_pop/0]).

-export([is_empty/1,size/1,new/0,push/2,pop/1]).

-export_type([stack/1]).

-file("/Users/baha/proper-1.3/include/proper.hrl", 1).

-compile(debug_info).

-file("/Users/baha/proper-1.3/include/proper_common.hrl", 1).

-file("/Users/baha/proper-1.3/include/proper.hrl", 32).

-import(proper, [numtests/2,fails/1,on_output/2,conjunction/1]).

-import(proper,
        [collect/2,
         collect/3,
         aggregate/2,
         aggregate/3,
         classify/3,
         measure/3,
         with_title/1,
         equals/2]).

-import(proper_types,
        [integer/2,
         float/2,
         atom/0,
         binary/0,
         binary/1,
         bitstring/0,
         bitstring/1,
         list/1,
         vector/2,
         union/1,
         weighted_union/1,
         tuple/1,
         loose_tuple/1,
         exactly/1,
         fixed_list/1,
         function/2,
         map/2,
         any/0]).

-import(proper_types,
        [integer/0,
         non_neg_integer/0,
         pos_integer/0,
         neg_integer/0,
         range/2,
         float/0,
         non_neg_float/0,
         number/0,
         boolean/0,
         byte/0,
         char/0,
         list/0,
         tuple/0,
         string/0,
         wunion/1,
         term/0,
         timeout/0,
         arity/0]).

-import(proper_types,
        [int/0,
         nat/0,
         largeint/0,
         real/0,
         bool/0,
         choose/2,
         elements/1,
         oneof/1,
         frequency/1,
         return/1,
         default/2,
         orderedlist/1,
         function0/1,
         function1/1,
         function2/1,
         function3/1,
         function4/1,
         weighted_default/2,
         parameter/1,
         parameter/2,
         with_parameter/3,
         with_parameters/2]).

-import(proper_unicode, [utf8/0,utf8/1,utf8/2]).

-import(proper_types, [resize/2,non_empty/1,noshrink/1]).

-import(proper_symb,
        [eval/1,
         eval/2,
         defined/1,
         well_defined/1,
         pretty_print/1,
         pretty_print/2]).

-import(proper_statem,
        [commands/1,
         commands/2,
         parallel_commands/1,
         parallel_commands/2,
         more_commands/2]).

-import(proper_statem,
        [run_commands/2,
         run_commands/3,
         state_after/2,
         command_names/1,
         zip/2,
         run_parallel_commands/2,
         run_parallel_commands/3]).

-import(proper_unused_imports_remover, []).

-file("stack.erl", 8).

-opaque stack(T) :: {non_neg_integer(), [T]}.

-spec is_empty(stack(_T)) -> boolean().

is_empty({0,[]}) ->
    true;
is_empty({_N,[_Top|_Rest]}) ->
    false.

-spec size(stack(_T)) -> non_neg_integer().

size({N,_Elems}) ->
    N.

-spec new() -> stack(_T).

new() ->
    {0,[]}.

-spec push(T, stack(T)) -> stack(T).

push(X, {N,Elems}) ->
    {N + 1,[X|Elems]}.

-spec pop(stack(T)) -> {T, stack(T)}.

pop({0,[]}) ->
    throw(stack_empty);
pop({N,[Top|Rest]}) when N > 0 ->
    {Top,{N - 1,Rest}}.

prop_push_pop() ->
    proper:forall({integer(),stack(integer())},
                  fun({X,S}) ->
                         begin
                             {Y,_} = pop(push(X, S)),
                             X =:= Y
                         end
                  end).

stack(T) ->
    well_defined(proper_types:sized(fun(S) ->
                                           stack(S, T)
                                    end)).

stack(0, _) ->
    {'$call',stack,new,[]};
stack(S, G) ->
    frequency([{1,
                proper_types:lazy(fun() ->
                                         stack(0, G)
                                  end)},
               {5,
                proper_types:lazy(fun() ->
                                         proper_types:bind([stack(S - 1,
                                                                  G)],
                                                           fun([St]) ->
                                                                  {'$call',
                                                                   stack,
                                                                   push,
                                                                   [G,
                                                                    St]}
                                                           end,
                                                           true)
                                  end)},
               {5,
                proper_types:lazy(fun() ->
                                         proper_types:bind([stack(S - 1,
                                                                  G)],
                                                           fun([St]) ->
                                                                  {'$call',
                                                                   erlang,
                                                                   element,
                                                                   [2,
                                                                    {'$call',
                                                                     stack,
                                                                     pop,
                                                                     [St]}]}
                                                           end,
                                                           true)
                                  end)}]).



